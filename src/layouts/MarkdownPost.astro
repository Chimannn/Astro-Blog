---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

import { formatDate } from "../utils";
import { SITE_TITLE } from "../consts";
const { frontmatter } = Astro.props;
const type = frontmatter.tags[0];
const { pubDate, title, description, featured } = frontmatter;
const dateFormated = formatDate(pubDate);
---

<html lang="zh-CN" dir="ltr" class="js no-touch progressive-image no-reduced-motion progressive">
  <head>
    <BaseHead title={`${title} - ${SITE_TITLE}`} description={description} image={frontmatter.cover.square} />
  </head>
  <body class:list={["page-article", { "theme-dark": frontmatter.theme === "dark" }]}>
    <Header />
    <main id="main" class="main">
      <section>
        <article class="article">
          <div class:list={[{ "featured-header": featured, "article-header": !featured }]}>
            <div class="category component">
              <div class="component-content">
                <div class="category-eyebrow">
                  <span class="category-eyebrow__category category_original">{type}</span>
                  <span class="category-eyebrow__date">{dateFormated}</span>
                </div>
              </div>
            </div>
            <div class="pagetitle component">
              <div class="component-content">
                <h1 class="hero-headline">{title}</h1>
              </div>
            </div>
            <div class:list={[{ "featured-subhead": featured, "article-subhead": !featured }, "component"]}>
              <div class="component-content">{description}</div>
            </div>

            <div class:list={["tagssheet component"]}>
              <div class="component-content">
                {
                  frontmatter.tags.map((tag) => {
                    return (
                      <a href={`/tags/${tag}`} class="tag">
                        {tag}
                      </a>
                    );
                  })
                }
              </div>
            </div>
          </div>
          <slot />
          <div class="component">
            <div class="component-content">
              <div class="article-copyright">
                <!-- <a class="content" href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank"
                  >版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）</a
                > -->
                <p class="content">作者：{frontmatter.author} &nbsp;&nbsp;&nbsp; 发表日期：{dateFormated}</p>
              </div>
            </div>
          </div>
        </article>
        <div class="toTopDiv">
          <button onclick="scrollToTop()">飞升</button>
          <!-- <canvas id="myCanvas"></canvas> -->
        </div>
      </section>
    </main>
    <Footer />
    <!-- <script src="https://cdn.jsdelivr.net/npm/three@0.136/build/three.min.js" is:inline></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.115/examples/js/loaders/GLTFLoader.js" is:inline></script> -->

    <script is:inline>
      var script = document.createElement("script");
      script.src = "/static/js/initPost.js";
      document.head.appendChild(script);

      function scrollToTop(){
        scrollToPosition(0, 320)
      }

      const scrollToPosition = (distance, time) => {
        // st为函数执行时滚动条到文档顶部的距离
        const st = document.documentElement.scrollTop
        // 需要滑动的距离
        const need = st - distance
        // 循环时间,值越小越耗性能
        const loopTime = 20
        // 循环次数
        let loopCount = time / loopTime
        // 每次步进的距离
        const step = need / loopCount

        const scrollTimer = setInterval(() => {
            if (loopCount > 0) {
                // 此项设置是为了精准定位
                loopCount !== 1 ? document.documentElement.scrollTop -= step : document.documentElement.scrollTop = distance
                loopCount--
            } else {
                clearInterval(scrollTimer)
            }
        }, loopTime)

      }


      // var scene = new THREE.Scene();
      // var camera = new THREE.PerspectiveCamera(
      //   75,
      //   window.innerWidth / window.innerHeight,
      //   0.1,
      //   1000
      // );

      //创建渲染器，设置尺寸为窗口尺寸，并将渲染后的元素添加到body
      // var renderer = new THREE.WebGLRenderer();
      // renderer.setSize(window.innerWidth, window.innerHeight);
      // document.body.appendChild(renderer.domElement);

      // //创建一个Mesh（绿色的3D立方体），并添加到场景中
      // var geometry = new THREE.BoxGeometry();
      // var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
      // var cube = new THREE.Mesh(geometry, material);
      // scene.add(cube);

      // //设置照相机的位置
      // camera.position.z = 5;

      // //浏览器每次渲染的时候更新立方体的旋转角度
      // var animate = function () {
      //   requestAnimationFrame(animate);

      //   cube.rotation.x += 0.01;
      //   cube.rotation.y += 0.01;

      //   renderer.render(scene, camera);
      // };

      // animate();




      // const canvas = document.getElementById("myCanvas");
      // const renderer = new THREE.WebGLRenderer({ canvas });

      // const loader = new THREE.ObjectLoader();
      // loader.load('../../static/img/3d.gltf', function ( obj ) {
      //   scene.add( obj );
      // });

      
      // const loader = new THREE.GLTFLoader();
      // loader.load( '/static/img/3d.gltf', function ( gltf ) {
      //   const model = gltf.scene;
      //   renderer.render(model, camera);
      // });
    </script>
  </body>
</html>
