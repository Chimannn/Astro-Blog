---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

import { formatDate } from "../utils";
import { SITE_TITLE } from "../consts";
const { frontmatter } = Astro.props;
const type = frontmatter.tags[0];
const { pubDate, title, description, featured } = frontmatter;
const dateFormated = formatDate(pubDate);
---

<html lang="zh-CN" dir="ltr" class="js no-touch progressive-image no-reduced-motion progressive">
  <head>
    <BaseHead title={`${title} - ${SITE_TITLE}`} description={description} image={frontmatter.cover.square} />
  </head>
  <body class:list={["page-article", { "theme-dark": frontmatter.theme === "dark" }]}>
    <Header />
    <main id="main" class="main">
      <section>
        <article class="article">
          <div class:list={[{ "featured-header": featured, "article-header": !featured }]}>
            <div class="category component">
              <div class="component-content">
                <div class="category-eyebrow">
                  <span class="category-eyebrow__category category_original">{type}</span>
                  <span class="category-eyebrow__date">{dateFormated}</span>
                </div>
              </div>
            </div>
            <div class="pagetitle component">
              <div class="component-content">
                <h1 class="hero-headline">{title}</h1>
              </div>
            </div>
            <div class:list={[{ "featured-subhead": featured, "article-subhead": !featured }, "component"]}>
              <div class="component-content">{description}</div>
            </div>

            <div class:list={["tagssheet component"]}>
              <div class="component-content">
                {
                  frontmatter.tags.map((tag) => {
                    return (
                      <a href={`/tags/${tag}`} class="tag">
                        {tag}
                      </a>
                    );
                  })
                }
              </div>
            </div>
          </div>
          <slot />
          <div class="component">
            <div class="component-content">
              <div class="article-copyright">
                <!-- <a class="content" href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank"
                  >版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）</a
                > -->
                <p class="content">作者：{frontmatter.author} &nbsp;&nbsp;&nbsp; 发表日期：{dateFormated}</p>
              </div>
            </div>
          </div>
        </article>
        <div id="toTopDiv" class="toTopDiv" onclick="scrollToTop()"></div>
      </section>
    </main>
    <Footer />
    <script src="https://cdn.jsdelivr.net/npm/three@0.139.0/build/three.min.js" is:inline></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.139.0/examples/js/loaders/GLTFLoader.js" is:inline></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.0/lottie.min.js" is:inline></script>
    <script is:inline>
      var script = document.createElement("script");
      script.src = "/static/js/initPost.js";
      document.head.appendChild(script);

      //返回顶部小火箭
      var anim = bodymovin.loadAnimation({
        container: document.getElementById('toTopDiv'),
        renderer: 'svg',
        loop: false,
        autoplay: false,
        path: '/static/img/rocket.json',
      });
      anim.setSpeed(2.1)
      anim.goToAndStop(61,true)

      window.addEventListener("scroll",listenScroll)

      async function scrollToTop(){
        await playAnimation(anim,[61,80])
        window.removeEventListener("scroll",listenScroll)
        window.addEventListener("scroll",()=>{
          let distance = window.pageYOffset || document.documentElement.scrollTop
          if(distance == 0){
            window.addEventListener("scroll",listenScroll)
          }
        })
        document.getElementById("toTopDiv").style.visibility = "hidden"
        document.getElementById("toTopDiv").style.opacity = 0
        scrollTop()
        await playAnimation(anim,[80,99])
        await playAnimation(anim,[1,61])
      }

      const scrollTop = () => {
        window.scrollTo({
          top: 0,
          behavior: "smooth"
        });
      }

      function playAnimation(animation, segements) {
        return new Promise(resolve => {
          animation.playSegments(segements, true);
      
          const removeListener = animation.addEventListener('complete', () => {
            resolve();
            removeListener();
          });
        })
      }

      function listenScroll(){
        let scrollDistance = window.pageYOffset || document.documentElement.scrollTop
        if(scrollDistance > 500){
          document.getElementById("toTopDiv").style.visibility = "visible"
          document.getElementById("toTopDiv").style.opacity = 1
        }else{
          document.getElementById("toTopDiv").style.visibility = "hidden"
          document.getElementById("toTopDiv").style.opacity = 0
        }
      }

    </script>
  </body>
</html>
